#include "SampleGenerator.h"
#include <fstream>

namespace mst {

std::vector< Point<int> > SampleGenerator::get_samples(int)
{
	return samples_int_;
}

std::vector< Point<float> > SampleGenerator::get_samples()
{
	return samples_float_;
}

Point<int> SampleGenerator::get_random_point(int)
{
	int x = std::rand() % max_;
	int y = std::rand() % max_;
	return Point<int>(x, y);
}

Point<float> SampleGenerator::get_random_point()
{
	float x = std::rand() % max_ + (std::rand() % 100) * 0.01;
	float y = std::rand() % max_ + (std::rand() % 100) * 0.01;
	return Point<float>(x, y);
}

bool SampleGenerator::repeated(int current, int)
{
	for (int i = 0; i < current; ++i)
		if (samples_int_[i] == samples_int_[current])
			return true;
	return false;
}

bool SampleGenerator::repeated(int current)
{
	for (int i = 0; i < current; ++i)
		if (samples_float_[i] == samples_float_[current])
			return true;
	return false;
}

void SampleGenerator::generate(bool is_integer)
{
	max_ = 3 * size_;
	if (is_integer)
	{
		for (int i = 0; i < size_; ++i)
		{
			samples_int_.push_back(get_random_point(0));
			if (repeated(i, 0))
			{
				samples_int_.erase(samples_int_.begin() + i);
				--i;
			}
		}
	}
	else
	{
		for (int i = 0; i < size_; ++i)
		{
			samples_float_.push_back(get_random_point());
			if (repeated(i))
			{
				samples_float_.erase(samples_float_.begin() + i);
				--i;
			}
		}
	}

	save_to_file();
}

void SampleGenerator::save_to_file()
{
    std::ofstream out(path_.c_str());
	out << "# This sample file is auto-generated by SampleGenerator with\n"
		<< "# random points.\n"
		<< "# Please do NOT modify it.\n"
		<< "\n" << size_ << "\n\n";

	if (samples_int_.size() != 0)
	{
		for (int i = 0; i < size_; ++i)
			out << samples_int_[i];
	}
	else
	{
		for (int i = 0; i < size_; ++i)
			out << samples_float_[i];
	}

	out.close();
}

}	// namespace mst
